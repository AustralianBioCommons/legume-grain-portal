name: Deploy Portal to S3 + CloudFront (no code changes)

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: choice
        options: [staging, production]
        default: staging

permissions:
  contents: read
  id-token: write   # AWS OIDC

concurrency:
  group: portal-s3-${{ github.ref || github.run_id }}
  cancel-in-progress: false

env:
  NODE_VERSION: "22"
  AWS_REGION: "ap-southeast-2"

jobs:
  build:
    name: Build site
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm build
        # If your app needs explicit export:
        # run: pnpm exec next export
      - name: Verify build output
        run: test -d out && ls -la out
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: portal-site
          path: ./out
          if-no-files-found: error

  deploy-staging:
    name: Deploy to STAGING (S3 + CloudFront)
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    env:
      AWS_REGION: "ap-southeast-2"
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
    steps:
      - uses: actions/download-artifact@v4
        with: { name: portal-site, path: out }

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GerminateGithubActionsOIDCRole-staging
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-portal-staging-${{ github.run_id }}  

      # Sync non-HTML (cache-forever)
      - name: Upload static assets (cacheable)
        run: |
          aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
            --delete \
            --exclude "*.html" \
            --cache-control "public,max-age=31536000,immutable"

      # Sync ALL HTML (no-cache) incl. nested */index.html
      - name: Upload HTML (no-cache)
        run: |
          aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
            --exclude "*" --include "*.html" \
            --cache-control "no-cache" \
            --content-type "text/html"

      # ⚠️ If you have many HTML pages, consider "/*" here.
      - name: Invalidate CloudFront (index only)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CF_DISTRIBUTION_ID }} \
            --paths "/index.html"

  deploy-production:
    name: Deploy to PRODUCTION (requires approval)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production   # protect this env to require approval
    env:
      AWS_REGION: "ap-southeast-2"
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
    steps:
      - uses: actions/download-artifact@v4
        with: { name: portal-site, path: out }

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GerminateGithubActionsOIDCRole-production
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-portal-prod-${{ github.run_id }}  

      - name: Upload static assets (cacheable)
        run: |
          aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
            --delete \
            --exclude "*.html" \
            --cache-control "public,max-age=31536000,immutable"

      - name: Upload HTML (no-cache)
        run: |
          aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
            --exclude "*" --include "*.html" \
            --cache-control "no-cache" \
            --content-type "text/html"


      - name: Invalidate CloudFront (full)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CF_DISTRIBUTION_ID }} \
            --paths "/*"
